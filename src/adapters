Stub Adapter
=============

An adapter that stubs the adapter API for testing.

    Promise = require 'bluebird'
    TransactionRequest = require '../transaction'
    AsyncPool = require 'async-pool'

    exports.initialize = (schema)->
      settings = schema.settings
      adapter = new StubAdapter(settings)
      return schema.adapter = adapter

    class StubAdapter

      constructor: (settings)->
        @settings = settings
        @transactionsEnabled = true
        @pool = new AsyncPool([new StubClient('A'), new StubClient('B')])

      query: (text)->
        TransactionRequest.ask(adapter: this).then (transaction)->
          Promise.using transaction.getClient(), (client)->
            client.query(text)

Get a client. Use with `Promise.using` in order to ensure client is
put back properly.

      getClient: ()->
        @pool.use()

      enableTransactions: ()->
        @transactionsEnabled = true

      disableTransactions: ()->
        @transactionsEnabled = false

      openTransaction: (client)->
        client.query('begin')

      openSubTransaction: (client, name)->
        client.query("savepoint \"#{name}\"")

      commitTransaction: (client)->
        client.query("commit")

      commitSubTransaction: (client, name)->
        client.query("release \"#{name}\"")

      rollbackTransaction: (client)->
        client.query("rollback")

      rollbackSubTransaction: (client, name)->
        client.query("rollback to \"#{name}\"")

    class StubClient

      constructor: (name)->
        @name = name

      query: (text)->
        #console.log("query client #{@name}: #{text}")
        new Promise (res)->
          setTimeout ->
            res()
          , 1




