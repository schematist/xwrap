// Generated by CoffeeScript 1.9.0
(function() {
  var AUTO, AsyncProxyPool, GLOBAL_TIMEOUT, IMPLICIT, MAX_REQUEST_IN_TRANSACTION, NEW, Promise, Request, SUB, TICKER_REPEAT, Transaction, psbytes, _, _ref;

  Promise = require('bluebird');

  _ = require('lodash');

  Request = require('./request');

  psbytes = Promise.promisify(require('crypto').pseudoRandomBytes);

  _ref = require('./constants'), NEW = _ref.NEW, SUB = _ref.SUB, AUTO = _ref.AUTO, IMPLICIT = _ref.IMPLICIT, GLOBAL_TIMEOUT = _ref.GLOBAL_TIMEOUT, MAX_REQUEST_IN_TRANSACTION = _ref.MAX_REQUEST_IN_TRANSACTION, TICKER_REPEAT = _ref.TICKER_REPEAT;

  AsyncProxyPool = require('async-proxy-pool');

  Transaction = (function() {
    var deathticks, transactionTicker;

    Transaction.processing = {};

    Transaction.implicit = [];

    Transaction.unanswered = [];

    function Transaction(_arg) {
      this.callback = _arg.callback, this.name = _arg.name, this.adapter = _arg.adapter, this.id = _arg.id;
      this.state = 'initial';
      this.subtransactions = [];
      this._client = null;
      this.isSubtransaction = false;
    }

    Transaction.prototype.start = function(transactionType) {
      var self;
      self = this;
      return Promise.resolve(this.name).then(function(name) {
        if (name) {
          return name;
        }
        return psbytes(12).then(function(buf) {
          return buf.toString('base64');
        });
      }).then(function(name) {
        Transaction.logger.debug("START", name.slice(0, 4));
        self.name = name;
        switch (transactionType) {
          case IMPLICIT:
            return self.startImplicit();
          case NEW:
            return self.create();
          case AUTO:
            return self.createAutocommit();
          case transactionType instanceof Transaction:
            return self.merge(transactionType);
          default:
            throw new Error("unknown transaction type " + transactionType);
        }
      })["catch"](function(err) {
        Transaction.logger.error("error during transaction " + self.name + ": " + err);
        throw err;
      });
    };

    Transaction.prototype.startImplicit = function() {
      var self;
      if (_.size(Transaction.processing) === 0) {
        return this.create();
      } else {
        this.state = 'implicit';
        self = this;
        Transaction.implicit.push(self);
        return this.promise = Request.ask(this.id, self.name)["finally"](function() {
          if (self.state !== 'implicit') {
            return;
          }
          return Transaction.implicit.splice(Transaction.implicit.indexOf(self), 1);
        }).then(function(transaction) {
          if (self.state !== 'implicit') {
            return;
          }
          if (transaction != null) {
            return self.merge(transaction);
          }
          return self.create();
        });
      }
    };

    Transaction.prototype.create = function() {
      var self;
      this.state = 'prepared';
      self = this;
      Transaction.processing[self.name] = self;
      return Promise.using(this.adapter.getRawClient(), function(client) {
        return self.execute(client);
      });

      /*
      return Promise.any([
        (Promise.using adapter.getRawClient(), (client)->
          self.execute(client)),
        requestTransaction(self.name).then (transaction)->
          _ENCLOSING.name = tranaction.name
          return _ENCLOSING
      ]).then (res)->
        if res == _ENCLOSING
          delete Transaction.processing[self.name]
          name = _ENCLOSING.name
          throw new Error(
            "Cannot start top-level transaction in enclosing transaction #{name}")
        return res
       */
    };

    Transaction.prototype.merge = function(enclosingTransaction) {
      var self;
      this.state = 'merged';
      Transaction.logger.debug((this.name.slice(0, 4)) + " MERGE WITH " + (enclosingTransaction.name.slice(0.4)));
      self = this;
      this.isSubtransaction = true;
      return Promise.using(enclosingTransaction.takeClient(this.name), function(client) {
        return self.execute(client);
      });
    };

    Transaction.prototype.execute = function(client) {
      var clientDataAttributes, clientMethods, self, _ref1;
      this.state = 'executing';
      self = this;
      _ref1 = this.adapter.features.xwrap, clientMethods = _ref1.clientMethods, clientDataAttributes = _ref1.clientDataAttributes;
      this._client = new AsyncProxyPool([client], clientMethods, clientDataAttributes);
      return self.openTransaction().then(function() {
        var callback;
        callback = Promise.method(self.callback);
        return Request.handle(self, callback.call(self, self), self.adapter.id);
      })["catch"](function(err) {
        return self.rollback().then(function() {
          throw err;
        });
      }).then(function(res) {
        return self.commit().then(function() {
          return res;
        });
      });
    };

    Transaction.prototype.complete = function() {
      var i, implicit, req, request, _i, _len, _ref1, _ref2, _results, _results1;
      this.state = 'completed';
      delete Transaction.processing[this.name];
      this._client = null;
      if (_.size(Transaction.processing) > 0) {
        return;
      }
      implicit = Transaction.implicit.shift();
      if (implicit != null) {
        Request.handle(null, implicit.promise, {
          adapter: this.adapter
        });
        _ref1 = Transaction.unanswered;
        _results = [];
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          req = _ref1[i];
          if (req.implicit === implicit && ((_ref2 = req.deferred) != null ? _ref2.promise.isPending() : void 0)) {
            req.fulfill(null);
            Transaction.unanswered.splice(i, 1);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      } else {
        _results1 = [];
        while (Transaction.unanswered.length > 0) {
          request = Transaction.unanswered.pop();
          _results1.push(request.fulfill(null));
        }
        return _results1;
      }
    };

    Transaction.prototype.openTransaction = function() {
      Transaction.logger.debug("OPEN TR", this.name.slice(0, 4));
      return Promise.using(this.takeClient(this.name), (function(_this) {
        return function(client) {
          Transaction.logger.trace("OPEN: Got client", client.name);
          if (_this.isSubtransaction) {
            if (_this.adapter.features.xwrap.subtransactions) {
              return _this.adapter.openSubTransaction(client, _this.name);
            }
          } else {
            return _this.adapter.openTransaction(client);
          }
        };
      })(this));
    };

    Transaction.prototype.commit = function() {
      return Promise.using(this.takeClient(this.name), (function(_this) {
        return function(client) {
          if (_this.isSubtransaction) {
            if (_this.adapter.features.xwrap.subtransactions) {
              return _this.adapter.commitSubTransaction(client, _this.name);
            }
          } else {
            return _this.adapter.commitTransaction(client);
          }
        };
      })(this))["finally"]((function(_this) {
        return function() {
          return _this.complete();
        };
      })(this));
    };

    Transaction.prototype.rollback = function() {
      return Promise.using(this.takeClient(this.name), (function(_this) {
        return function(client) {
          if (_this.isSubtransaction) {
            if (_this.adapter.features.xwrap.subtransactions) {
              return _this.adapter.rollbackSubTransaction(client, _this.name);
            }
          } else {
            return _this.adapter.rollbackTransaction(client);
          }
        };
      })(this))["finally"]((function(_this) {
        return function() {
          return _this.complete();
        };
      })(this));
    };

    Transaction.prototype.takeClient = function(name) {
      if (this.state !== 'executing') {
        return Promise.reject(new Error('Cannot get client from non-executing transaction.'));
      }
      Transaction.logger.debug('taking client:', name);
      return this._client.use();
    };

    Transaction.prototype.client = function(name) {
      if (this.state !== 'executing') {
        return Promise.reject(new Error('Cannot get client from non-executing transaction.'));
      }
      Transaction.logger.debug('sharing client:', name);
      return this._client.share();
    };

    Request.handleUnanswered = function(request) {
      var check, _ref1, _ref2;
      if (!((_ref1 = request.deferred) != null ? _ref1.promise.isPending() : void 0)) {
        Request.logger.debug("unhandled, not pending:", (_ref2 = request.name) != null ? _ref2 : '????');
        return;
      }
      if (_.size(Transaction.processing) > 0 || Transaction.implicit.length > 0) {
        Transaction.unanswered.push(request);
        if (GLOBAL_TIMEOUT != null) {
          return setTimeout(function() {
            var _ref3;
            if ((_ref3 = request.deferred) != null ? _ref3.promise.isPending() : void 0) {
              Request.logger.error("UNANSWERED TRANSACTION REQUEST");
              return request.reject(new Error("Couldn't handle unanswered transaction request"));
            }
          }, GLOBAL_TIMEOUT);
        } else {
          check = function() {
            return setTimeout(function() {
              var _ref3;
              if (!((_ref3 = request.deferred) != null ? _ref3.promise.isPending() : void 0)) {
                return _.remove(Transaction.unanswered, function(i) {
                  return i === request;
                });
              } else {
                return check();
              }
            }, 1000);
          };
          return check();
        }
      } else {
        Request.logger.debug("no transactions: fulfill with null");
        return request.fulfill(null);
      }
    };

    deathticks = MAX_REQUEST_IN_TRANSACTION / TICKER_REPEAT;

    transactionTicker = function(repeat) {
      var old, tick;
      old = [];
      tick = function() {
        return setTimeout(function() {
          var implicit, processing, requests, str;
          str = function(list) {
            return list.map(function(i) {
              var _ref1, _ref2;
              return (_ref1 = (_ref2 = i.name) != null ? _ref2.slice(0, 5) : void 0) != null ? _ref1 : '????';
            }).join(' ');
          };
          processing = str(_.values(Transaction.processing));
          implicit = str(Transaction.implicit);
          requests = str(Transaction.unanswered);
          Request.logger.info(("Transactions: PRC: " + processing + " ") + ("IMP: " + implicit + " REQ: " + requests));
          Transaction.unanswered.slice().map(function(r, i) {
            var o, oi, _ref1;
            if (!((_ref1 = r.deferred) != null ? _ref1.promise.isPending() : void 0)) {
              Transaction.unanswered.splice(i, 1);
              return;
            }
            oi = _.findIndex(old, function(o) {
              return o.request === r;
            });
            if (oi !== -1) {
              o = old[oi];
              o.ticks += 1;
              if (o.ticks > deathticks) {
                o.request.reject(new Error('Waited too long'));
                return old.splice(oi, 1);
              }
            } else {
              return old.push({
                request: r,
                ticks: 0
              });
            }
          });
          return tick();
        }, repeat);
      };
      return tick();
    };

    transactionTicker(TICKER_REPEAT);

    return Transaction;

  })();

  module.exports = Transaction;

}).call(this);
